<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!--设置调度时间间隔，单位毫秒，默认就是1小时-->
        <property name="sessionValidationInterval" value="1800000"/>
        <!--设置会话验证调度器进行会话验证时的会话管理器-->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!--设置Session缓存名字，默认就是shiro-activeSessionCache。-->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <!--用于生成会话ID，默认就是JavaUuidSessionIdGenerator。-->
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--constructor-arg：通过构造函数注入；property：通过setter对应的方法注入。-->
        <!--sessionIdCookie.domain：设置Cookie的域名，默认空，即当前访问的域名。-->
        <!--sessionIdCookie.path：设置Cookie的路径，默认空，即存储在域名根下。-->
        <!--设置Cookie名字，默认为JSESSIONID。-->
        <constructor-arg value="jwebSessionID"/>
        <!--如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持。-->
        <property name="httpOnly" value="true"/>
        <!--设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie-->
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期。-->
        <property name="globalSessionTimeout" value="1800000"/>
        <!--默认是开启的，在会话过期后会调用SessionDAO的delete方法删除会话：如会话时持久化存储的，可以调用此方法进行删除。-->
        <property name="deleteInvalidSessions" value="true"/>
        <!--是否开启会话验证器，默认是开启的。-->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!--会话验证调度器，sessionManager默认就是使用ExecutorServiceSessionValidationScheduler，-->
        <!--其使用JDK的ScheduledExecutorService进行定期调度并验证会话是否过期-->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!--Shiro提供了使用Ehcache进行会话存储，Ehcache可以配合TerraCotta实现容器无关的分布式集群。-->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!--是否启用/禁用Session Id Cookie，默认是启用的；如果禁用后将不会设置Session Id Cookie，-->
        <!--即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。-->
        <property name="sessionIdCookieEnabled" value="true"/>
        <!--sessionManager创建会话Cookie的模板。-->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!--URL不显示JSESSIONID-->
        <property name="sessionIdUrlRewritingEnabled" value="false"/>
    </bean>

    <!--记住我免登陆Cookie模板-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="864000"/><!-- 单位秒，现在设置10天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 缓存管理器 使用Ehcache实现 -->
    <!-- 使用spring生成的工厂cacheManager -->
    <!--<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
    <!--设置ehcache缓存的配置文件。-->
    <!--<property name="cacheManagerConfigFile" value="classpath:spring/ehcache.xml"/>-->
    <!--</bean>-->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory"/>
    </bean>

    <bean id="DefaultHashService" class="org.apache.shiro.crypto.hash.DefaultHashService"/>
    <bean id="Shiro1CryptFormat" class="org.apache.shiro.crypto.hash.format.Shiro1CryptFormat"/>
    <bean id="DefaultHashFormatFactory" class="org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory"/>
    <bean id="DefaultPasswordService" class="org.apache.shiro.authc.credential.DefaultPasswordService">
        <!--定义散列密码，默认使用DefaultHashService（默认SHA-256算法）-->
        <property name="hashService" ref="DefaultHashService"/>
        <!--对散列出的值进行格式化，默认使用Shiro1CryptFormat，另外提供了Base64Format和HexFormat，-->
        <!--对于有salt的密码请自定义实现ParsableHashFormat然后把salt格式化到散列值中-->
        <property name="hashFormat" ref="Shiro1CryptFormat"/>
        <!--用于根据散列值得到散列的密码和salt；因为如果使用如SHA算法，那么会生成一个salt，-->
        <!--此salt需要保存到散列后的值中以便之后与传入的密码比较时使用；默认使用DefaultHashFormatFactory-->
        <property name="hashFormatFactory" ref="DefaultHashFormatFactory"/>
    </bean>
    <bean id="PasswordMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">
        <property name="passwordService" ref="DefaultPasswordService"/>
    </bean>
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!--md5(md5(密码+username+salt)) username+salt为组合盐-->
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <bean id="UserRealm" class="net.core.realm.UserRealm">
        <!--验证密码-->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!--&lt;!&ndash;身份验证策略&ndash;&gt;-->
    <!--<bean id="authenticationStrategy" class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/>-->
    <!--&lt;!&ndash;修改身份验证继承类，支持多realm验证。&ndash;&gt;-->
    <!--<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">-->
    <!--<property name="authenticationStrategy" ref="authenticationStrategy"/>-->
    <!--</bean>-->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- rememberMe管理器 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <!--会话管理器-->
        <property name="sessionManager" ref="sessionManager"/>
        <!--设置SecurityManager的cacheManager，会自动设置实现了CacheManagerAware接口的相应对象，如SessionDAO的cacheManager。-->
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="realms">
            <list>
                <ref bean="UserRealm"/>
            </list>
        </property>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>

    <!-- shiro的web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--override these for application-specific URLs if you like:-->
        <property name="loginUrl" value="/webapp/login"/>
        <property name="successUrl" value="/webapp/desktop"/>
        <property name="unauthorizedUrl" value="/webapp/401Page"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                <!--anon匿名访问（即不需要登录即可访问）-->
                <!--authc需要身份认证通过后才能访问-->
                <!--roles[admin]需要有admin角色授权才能访问-->
                <!--perms["user:create"]需要有“user:create”权限才能访问-->
                <!--/desktop.html = authc-->
                <!--/logout = logout-->
                <!--/** = roles[admin]-->
                <!--/admin/** = authc, roles[admin]-->
                <!--/docs/** = authc, perms[document:read]-->
                /webapp/login = authc
                /webapp/logout = logout
                /webapp/** = user
            </value>
        </property>
    </bean>

    <!-- shiro生命周期处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>