<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!--扫描控制层注解-->
    <context:component-scan base-package="net.core.controller;net.jweb.*.controller"/>
    <mvc:annotation-driven />
    <bean class="net.core.exception.DefaultExceptionHandler"/>

    <!--<context:component-scan base-package="net.jweb">-->
    <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    <!--</context:component-scan>-->

    <!-- 拦截器 -->
    <!--<mvc:interceptors>-->
    <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
    <!-- <bean class="com.mylazy.base.interceptor.SysInterceptor" /> -->
    <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
    <!-- 拦截的路径是相对于web.xml的servlet的拦截路径 -->
    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**"/>-->
    <!--<mvc:exclude-mapping path="/login"/>-->
    <!--<mvc:exclude-mapping path="/login/ajax"/>-->
    <!--<bean class="net.jweb.server.core.filter.SysInterceptor"/>-->
    <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/view"/><!-- velocity模板放置的位置 -->
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">utf-8</prop>
                <prop key="output.encoding">utf-8</prop>
                <prop key="contentType">text/html;charset=utf-8</prop>
                <prop key="directive.parse.max.depth">10</prop>
            </props>
        </property>
    </bean>

    <!-- applicatongContext.xml中的视图部分配置已经设置视图解析位置和后缀名 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="cache" value="true"/>
        <property name="prefix" value="/"/><!-- 相对于上面配置的位置，再扫描相对位置 -->
        <property name="suffix" value=".html"/><!-- 扫描对应后缀名文件加载模板 -->
        <property name="contentType" value="text/html;charset=utf-8"/>
        <!-- 使用Spring 对 Velocity宏命令的支持, 将这个属性设为true  -->
        <property name="exposeSpringMacroHelpers" value="true"/>
        <!--session添加到Velocity视图中-->
        <property name="exposeRequestAttributes" value="false"/>
        <property name="exposeSessionAttributes" value="false"/>
    </bean>

    <!-- 配置视图解析器 -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
    <!--<property name="prefix" value="/WEB-INF/view/"/>-->
    <!--<property name="suffix" value=".html"/>&lt;!&ndash;可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  &ndash;&gt;-->
    <!--</bean>-->

    <!-- 配置@requestMapping和@RequestBody -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!-- 用于文件上传的bean -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>104857600</value>
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>

    <!-- 开启shiro的spring注解，必须放在lifecycleBeanPostProcessor生命周期处理器后面 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>